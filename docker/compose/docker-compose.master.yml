version: '3.8'

# This is a master docker-compose file that includes all services
# Usage: docker-compose -f docker-compose.master.yml up -d

services:
  # Database
  db:
    image: mysql:8.0.36
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/db_root_password
      MYSQL_DATABASE: ${DB_NAME:-game_dev_management}
      MYSQL_USER: ${DB_USER:-dbuser}
      MYSQL_PASSWORD_FILE: /run/secrets/db_password
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "--password=$$(cat /run/secrets/db_root_password)"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    secrets:
      - db_password
      - db_root_password
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # Database setup (migrations and seeds)
  db-setup:
    build:
      context: .
      dockerfile: Dockerfile.backend
    command: npm run setup-db
    depends_on:
      db:
        condition: service_healthy
    environment:
      NODE_ENV: production
      DB_HOST: db
      DB_PORT: 3306
      DB_NAME: ${DB_NAME:-game_dev_management}
      DB_USER: ${DB_USER:-dbuser}
    secrets:
      - db_password
    networks:
      - backend-network
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    restart: always
    depends_on:
      db:
        condition: service_healthy
      db-setup:
        condition: service_completed_successfully
    environment:
      NODE_ENV: production
      PORT: 5000
      DB_HOST: db
      DB_PORT: 3306
      DB_NAME: ${DB_NAME:-game_dev_management}
      DB_USER: ${DB_USER:-dbuser}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-1d}
    secrets:
      - db_password
      - jwt_secret
    networks:
      - backend-network
      - frontend-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    restart: always
    depends_on:
      - backend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - frontend-network
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 256M

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - monitoring-network
      - backend-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    volumes:
      - grafana-data:/var/lib/grafana
    ports:
      - "3000:3000"
    networks:
      - monitoring-network
    depends_on:
      - prometheus
    restart: always
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # MySQL exporter for Prometheus
  db-exporter:
    image: prom/mysqld-exporter:latest
    ports:
      - "9104:9104"
    networks:
      - backend-network
      - monitoring-network
    environment:
      - DATA_SOURCE_NAME=root:${MYSQL_ROOT_PASSWORD}@(db:3306)/
    depends_on:
      - db
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 128M

  # Loki for log aggregation
  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    volumes:
      - loki-data:/loki
    networks:
      - monitoring-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Promtail for log collection
  promtail:
    image: grafana/promtail:latest
    volumes:
      - /var/log:/var/log
      - ./promtail-config.yml:/etc/promtail/config.yml
    networks:
      - monitoring-network
    depends_on:
      - loki
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 128M

  # Load balancer for backend
  backend-lb:
    image: nginx:alpine
    volumes:
      - ./nginx-lb.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "5000:80"
    depends_on:
      - backend
    networks:
      - backend-network
      - frontend-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 128M

networks:
  backend-network:
    driver: bridge
  frontend-network:
    driver: bridge
  monitoring-network:
    driver: bridge

volumes:
  mysql-data:
  prometheus-data:
  grafana-data:
  loki-data:

secrets:
  db_password:
    file: ./secrets/db_password.txt
  db_root_password:
    file: ./secrets/db_root_password.txt
  jwt_secret:
    file: ./secrets/jwt_secret.txt
